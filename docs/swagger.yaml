definitions:
  controllers.KanbanBody:
    properties:
      end_date:
        type: string
      name:
        type: string
      start_date:
        type: string
    required:
    - end_date
    - name
    - start_date
    type: object
  models.Column:
    properties:
      dropzones:
        items:
          $ref: '#/definitions/models.Dropzone'
        type: array
      id:
        type: integer
      name:
        type: string
      order:
        type: integer
    type: object
  models.Dropzone:
    properties:
      column:
        $ref: '#/definitions/models.Column'
      column_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      order:
        type: integer
    type: object
  models.Kanban:
    properties:
      end_date:
        type: string
      id:
        type: integer
      name:
        type: string
      start_date:
        type: string
    type: object
  models.Ticket:
    properties:
      description:
        type: string
      dropzone:
        $ref: '#/definitions/models.Dropzone'
      dropzone_id:
        type: integer
      id:
        type: integer
      kanban:
        $ref: '#/definitions/models.Kanban'
      kanban_id:
        type: integer
      title:
        type: string
    type: object
  serializers.ColumnBody:
    properties:
      name:
        maxLength: 255
        minLength: 3
        type: string
      order:
        type: integer
    required:
    - name
    - order
    type: object
  serializers.DropzoneBody:
    properties:
      column_id:
        type: integer
      name:
        maxLength: 255
        minLength: 3
        type: string
      order:
        minimum: 0
        type: integer
    required:
    - column_id
    - name
    - order
    type: object
info:
  contact: {}
paths:
  /columns:
    get:
      consumes:
      - application/json
      description: Returns all columns
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Column'
              type: array
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all columns
      tags:
      - GetColumns
    post:
      consumes:
      - application/json
      description: Create a new column
      parameters:
      - description: Column
        in: body
        name: column
        required: true
        schema:
          $ref: '#/definitions/serializers.ColumnBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Column'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Create a new column
      tags:
      - CreateColumn
  /columns/:id:
    get:
      consumes:
      - application/json
      description: Returns a column by id
      parameters:
      - description: Column ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Column'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get a column by id
      tags:
      - GetColumn
    put:
      consumes:
      - application/json
      description: Update a column
      parameters:
      - description: Column ID
        in: path
        name: id
        required: true
        type: string
      - description: Column
        in: body
        name: column
        required: true
        schema:
          $ref: '#/definitions/serializers.ColumnBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Column'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update a column
      tags:
      - UpdateColumn
  /dropzones:
    get:
      consumes:
      - application/json
      description: Returns all dropzones
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Dropzone'
              type: array
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all dropzones
      tags:
      - Dropzones list
    post:
      consumes:
      - application/json
      description: Create a new dropzone
      parameters:
      - description: Dropzone
        in: body
        name: dropzone
        required: true
        schema:
          $ref: '#/definitions/serializers.DropzoneBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dropzone'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Create a new dropzone
      tags:
      - Create Dropzone
  /dropzones/:id:
    get:
      consumes:
      - application/json
      description: Returns a dropzone by id
      parameters:
      - description: Dropzone ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dropzone'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get a dropzone by id
      tags:
      - Get Dropzone
    put:
      consumes:
      - application/json
      description: Update a dropzone
      parameters:
      - description: Dropzone ID
        in: path
        name: id
        required: true
        type: string
      - description: Dropzone
        in: body
        name: dropzone
        required: true
        schema:
          $ref: '#/definitions/serializers.DropzoneBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dropzone'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update a dropzone
      tags:
      - Update Dropzone
  /kanbans:
    get:
      consumes:
      - application/json
      description: Returns all kanbans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Kanban'
              type: array
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      summary: get all kanbans
      tags:
      - GetKanbans
    post:
      consumes:
      - application/json
      description: Create a new kanban
      parameters:
      - description: Kanban
        in: body
        name: kanban
        required: true
        schema:
          $ref: '#/definitions/controllers.KanbanBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Kanban'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Create a new kanban
      tags:
      - CreateKanban
  /kanbans/:id:
    get:
      consumes:
      - application/json
      description: Return a kanban by id
      parameters:
      - description: Kanban ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Kanban'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Return a kanban by id
      tags:
      - GetKanban
    put:
      consumes:
      - application/json
      description: Update a kanban
      parameters:
      - description: Kanban ID
        in: path
        name: id
        required: true
        type: string
      - description: Kanban
        in: body
        name: kanban
        required: true
        schema:
          $ref: '#/definitions/controllers.KanbanBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Kanban'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update a kanban
      tags:
      - UpdateKanban
  /tickets:
    get:
      consumes:
      - application/json
      description: Returns all tickets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Ticket'
              type: array
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all tickets
      tags:
      - Tickets list
    post:
      consumes:
      - application/json
      description: Create a new ticket
      parameters:
      - description: Ticket
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/models.Ticket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Create a new ticket
      tags:
      - Create Ticket
  /tickets/:id:
    get:
      consumes:
      - application/json
      description: Returns a ticket by id
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get a ticket by id
      tags:
      - Get Ticket
    put:
      consumes:
      - application/json
      description: Update a ticket
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      - description: Ticket
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/models.Ticket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update a ticket
      tags:
      - Update Ticket
swagger: "2.0"
